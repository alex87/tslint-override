abstract class ABase {
    public static staticBase = 'np';
    public staticChild = 'np';
    public get aGetterToOverride() { return 1; }
    public get aGetterNotToOverride() { return 1; }
    public get aSetterToOverride() { return 1; }
    public get aSetterNotToOverride() { return 1; }
    public aPropertyToOverride = 1;
    public aPropertyNotToOverride = 1;
    public aMethodToOverride(): void { }
    public aMethodNotToOverride(): void { }
}

class Base extends ABase {
    public get getterToOverride() { return 1; }
    public get getterNotToOverride() { return 1; }
    public get setterToOverride() { return 1; }
    public get setterNotToOverride() { return 1; }
    public propertyToOverride = 1;
    public propertyNotToOverride = 1;
    public methodToOverride(): void { }
    public methodNotToOverride(): void { }
}

const DynBase = class extends ABase {
    public get getterToOverride() { return 1; }
    public get getterNotToOverride() { return 1; }
    public get setterToOverride() { return 1; }
    public get setterNotToOverride() { return 1; }
    public propertyToOverride = 1;
    public propertyNotToOverride = 1;
    public methodToOverride(): void { }
    public methodNotToOverride(): void { }
}

class Intermediary extends DynBase {
}

class Example1 extends Base {

    /** @override */ public get getterToOverride() { return 1; }

    public get getterNotToOverride() { return 1; }
               ~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]
    /** @override */ public get setterToOverride() { return 1; }

    public get setterNotToOverride() { return 1; }
               ~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]
    /** @override */ public propertyToOverride = 2;

    public propertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]

    /** @override */ public aPropertyToOverride = 2;

    public aPropertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~~      [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]


    public staticBase = 'np';

    public static staticChild = 'np';

    /**
     * Multiline doc comment
     * @Override
       ~~~~~~~~~ [Syntax error: 'Override' should be 'override' (case sensitive)]
     */
    /**
     * Second multi doc comment
     * @override
        ~~~~~~~~ [@override jsdoc tag already specified]
     */
    public methodToOverride(): void { }

    /** @override */ public mehtodToOverride(): void { }
                            ~~~~~~~~~~~~~~~~            [Member with @override keyword does not override any base class member]

    public methodNotToOverride(): void { }
           ~~~~~~~~~~~~~~~~~~~         [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]

    /** @override */ public aMethodToOverride(): void { }

    public aMethodNotToOverride(): void { }
           ~~~~~~~~~~~~~~~~~~~~        [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]
}

const Example2 = class extends Base {

    /** @override */ public get getterToOverride() { return 1; }

    public get getterNotToOverride() { return 1; }
               ~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]
    /** @override */ public get setterToOverride() { return 1; }

    public get setterNotToOverride() { return 1; }
               ~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]
    /** @override */ public propertyToOverride = 2;

    public propertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]

    /** @override */ public propertyToOverride = 2;

    public propertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]

    /** @override */ public aPropertyToOverride = 2;

    public aPropertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~~      [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]

    /** @override */ public methodToOverride(): void { }

    /** @override */
    public mehtodToOverride(): void { }
           ~~~~~~~~~~~~~~~~            [Member with @override keyword does not override any base class member]

    public methodNotToOverride(): void { }
           ~~~~~~~~~~~~~~~~~~~         [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]

    /** @override */ public aMethodToOverride(): void { }

    public aMethodNotToOverride(): void { }
           ~~~~~~~~~~~~~~~~~~~~        [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]
}

class Example3 extends DynBase {

    /** @override */ public get getterToOverride() { return 1; }

    public get getterNotToOverride() { return 1; }
               ~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]
    /** @override */ public get setterToOverride() { return 1; }

    public get setterNotToOverride() { return 1; }
               ~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]
    /** @override */ public propertyToOverride = 2;

    public propertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]

    /** @override */ public propertyToOverride = 2;

    public propertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]

    /** @override */ public aPropertyToOverride = 2;

    public aPropertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~~      [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]

    /** @override */ public methodToOverride(): void { }

    /** @override */
    public mehtodToOverride(): void { }
           ~~~~~~~~~~~~~~~~            [Member with @override keyword does not override any base class member]

    public methodNotToOverride(): void { }
           ~~~~~~~~~~~~~~~~~~~         [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]

    /** @override */ public aMethodToOverride(): void { }

    public aMethodNotToOverride(): void { }
           ~~~~~~~~~~~~~~~~~~~~        [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]
}

class Example4 extends Intermediary {

    /** @override */ public get getterToOverride() { return 1; }

    public get getterNotToOverride() { return 1; }
               ~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]
    /** @override */ public get setterToOverride() { return 1; }

    public get setterNotToOverride() { return 1; }
               ~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]
    /** @override */ public propertyToOverride = 2;

    public propertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]

    /** @override */ public propertyToOverride = 2;

    public propertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~       [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]

    /** @override */ public aPropertyToOverride = 2;

    public aPropertyNotToOverride = 2;
           ~~~~~~~~~~~~~~~~~~~~~~      [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]

    /** @override */ public methodToOverride(): void { }

    /** @override */
    public mehtodToOverride(): void { }
           ~~~~~~~~~~~~~~~~            [Member with @override keyword does not override any base class member]

    public methodNotToOverride(): void { }
           ~~~~~~~~~~~~~~~~~~~         [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]

    /** @override */ public aMethodToOverride(): void { }

    public aMethodNotToOverride(): void { }
           ~~~~~~~~~~~~~~~~~~~~        [Member is overriding a base member. Use the @override JSDoc tag if the override is intended]
}
